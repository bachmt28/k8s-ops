@Library('jenk-lib') _

pipeline {
  agent { label 'local-agent' }
  options {
    timestamps()
    ansiColor('xterm')
    timeout(time: 10, unit: 'MINUTES')
    buildDiscarder(logRotator(daysToKeepStr: '90', numToKeepStr: '1000'))
  }

  parameters {

    booleanParam defaultValue: false, name: 'EXEC_ON_247', description: 'Bật 24/7. Trừ ngày nghỉ lễ như Tết, 2/9 ...'
    booleanParam defaultValue: true, name: 'EXEC_ON_OUT', description: 'Bật ngoài giờ. Ngày thường bật đến 22h, T7-CN bật ừ 9h-20h'
    string name: 'EXEC_REQUESTER', description: 'Nhập thông tin người đưa ra yêu cầu (Bắt buộc). Ví dụ: xuan.na, anh.vtq'
    string name: 'EXEC_REASON', description: 'Nhập lý do (Bắt buộc). Ví dụ: test game KOL ...'
    string name: 'EXEC_END_DATE', description: 'Nhập ngày kết thúc YYYY-MM-DD (Tối đa 2 tháng, kể từ ngày đăng ký)'
    
    text  name: 'EXEC_WORKLOAD_LIST',
    description: '''
- Nhập theo định dạng như ví dụ, <namespace> | <tên workload>, phân cách bởi dấu |
- Nếu muốn exception toàn bộ workload trong namespace thì nhập <namespace> | all-of-workloads
- Ví dụ:
sb-example-namespace-1 | workloadA
sb-example-namespace-2 | workloadB
sb-example-namespace-3 | all-of-workloads
- CHÚ Ý: Cần upload USER_KUBECONFIG download về từ rancher để xác thực
    '''
    base64File 'USER_KUBECONFIG'

  }

  environment {
    EXEC_ON_247        = "${params.EXEC_ON_247}"
    EXEC_ON_OUT        = "${params.EXEC_ON_OUT}"
    EXEC_REQUESTER     = "${params.EXEC_REQUESTER}"
    EXEC_REASON        = "${params.EXEC_REASON}"
    EXEC_END_DATE      = "${params.EXEC_END_DATE}"
    EXEC_WORKLOAD_LIST = "${params.EXEC_WORKLOAD_LIST}"
    MAX_DAYS_ALLOWED   = "60"
    RAW_ROOT = '/tmp/exceptions/raw'
    RETAIN_DAYS = '60'
    RETENTION_DRY_RUN = '0'
    DEBUG=0

    HTTPS_PROXY = 'http://dc2-proxyuat.seauat.com.vn:8080'
    NO_PROXY = 'localhost,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,.seabank.com.vn,.seauat.com.vn,connectgateway.googleapis.com,199.36.153.8/30'
    TZ = 'Asia/Bangkok'
  }

  stages {

    stage('Preflight') {
      steps {
        // Lấy user bấm Run và gắn vào tên build
        wrap([$class: 'BuildUser']) {
          script {
            // 1) Xác định người chạy job
            def who = (env.BUILD_USER_ID ?: env.BUILD_USER ?: 'unknown') as String

            // 2) Lấy requester / reason từ params thay vì từ payload
            //    (chuẩn spec mới: EXEC_REQUESTER, EXEC_REASON)
            def req    = (params?.EXEC_REQUESTER ?: '').toString().trim()
            def reason = (params?.EXEC_REASON    ?: '').toString().trim()

            // 3) Build displayName/description gọn, tránh đụng script-approval
            def dn = "#${env.BUILD_NUMBER} · ${who}"
            if (req) { dn += " · ${req}" }
            currentBuild.displayName = dn

            def desc = (req ? " · requested from ${req}" : "") + (reason ? " · reason is ${reason}" : "")
            currentBuild.description = desc
          }
        }

        // 4) Kiểm tra ENV/params bắt buộc & chuẩn bị thư mục
        sh '''
          set -euo pipefail; set +x

          # Biến bắt buộc theo spec ENV
          : "${RAW_ROOT:?❌ RAW_ROOT chưa được set}"
          : "${EXEC_REQUESTER:?❌ EXEC_REQUESTER chưa được set}"
          : "${EXEC_REASON:?❌ EXEC_REASON chưa được set}"
          : "${EXEC_END_DATE:?❌ EXEC_END_DATE chưa được set}"

          # Nếu dùng cờ boolean, chấp nhận rỗng -> mặc định false
          EXEC_ON_247="${EXEC_ON_247:-false}"
          EXEC_ON_OUT="${EXEC_ON_OUT:-true}"

          # Kiểm tra endtime đúng định dạng (YYYYMMDD hoặc YYYY-MM-DD)
          if ! printf '%s' "$EXEC_END_DATE" | grep -Eq '^[0-9]{8}$|^[0-9]{4}-[0-9]{2}-[0-9]{2}$'; then
            echo "❌ EXEC_END_DATE sai định dạng, cần YYYYMMDD hoặc YYYY-MM-DD: $EXEC_END_DATE"
            exit 1
          fi

          # Tạo RAW_ROOT nếu chưa có
          mkdir -p "${RAW_ROOT}"
          echo "✅ Preflight OK • requester=${EXEC_REQUESTER} • reason=${EXEC_REASON} • endtime=${EXEC_END_DATE} • on247=${EXEC_ON_247} • onOut=${EXEC_ON_OUT}"
        '''
      }
    }



    stage('Validate Input') {
      steps {
        script {
          sh '''
            set -euo pipefail; set +x
            python3.9 exception-ontime/scripts/validate-exception-payload.py
          '''
        }
      }
    }

    stage('Check Authoriztion ? ') {
      steps {
        // Bind secret file theo credentialsId cố định (scope folder)
        withFileParameter('USER_KUBECONFIG') {
          sh '''
            set -euo pipefail; set +x
            KUBECONFIG_FILE="${USER_KUBECONFIG}" \
            python3 exception-ontime/scripts/validate-kube-auth.py
          '''
        }
      }
    }


    stage('Regist Workload for OT') {
      steps {
        wrap([$class: 'BuildUser']) {
          sh '''
            python3.9 exception-ontime/scripts/build-exception-draft.py
          '''
        }
      }
    }

  }

  post {
    success { echo '✅ Đã đăng ký thành công workload OT. 17h và 17h30 hàng ngày sẽ gửi thông báo danh sách' }
    failure { echo '❌ Step 1 FAIL: kiểm tra log parse YAML / quyền ghi RAW_ROOT / path script.' }
  }
  
}
